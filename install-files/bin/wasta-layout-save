#!/bin/bash

# ==============================================================================
# wasta-layout
#
# This script can be run at any time to "toggle" cinnamon default settings
#   to provide different layout defaults for the system
#
# enabled-applets wasta numbers (will show as #.json in user's ~/.cinnamon/configs/applet-name/ folder):
#   menu@cinnamon.org:101
#   show-desktop@cinnamon.org:102
#   panel-launchers@cinnamon.org:103
#   scale@cinnamon.org:104
#   window-list@cinnamon.org:105
#   removable-drives@cinnamon.org:106
#   inhibit@cinnamon.org:107
#   systray@cinnamon.org:108
#   bluetooth@cinnamon.org:109
#   network@cinnamon.org:110
#   sound@cinnamon.org:111
#   power@cinnamon.org:112
#   calendar@simonwiles.net:113
#   windows-quick-list@cinnamon.org:114
#   IcingTaskManager@json:115
#   user@cinnamon.org:116
#   trash@cinnamon.org:117
#   
#   2017-12-24 rik: initial script
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Setup
# ------------------------------------------------------------------------------

# Can be run as regular user OR root user (applying changes to logged in user)
# execute command following this template: $RUN_AS_USER command $CLOSE
LOGIN_USER="${SUDO_USER:-$USER}"

RUN_AS_USER=""
CLOSE=""
if [ "$USERID" == "root" ];
then
    RUN_AS_USER="su $LOGIN_USER -c 'dbus-launch "
    CLOSE="'"
fi

DIR=/usr/share/wasta-cinnamon-layout

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------
updateITMPinned()
{
    #if SAVED_LAUNCHERS set pinned-apps
    if [ "$SAVED_LAUNCHERS" ];
    then
        DEFAULT_CONFIG=/usr/share/cinnamon/applets/IcingTaskManager@json/3.*/settings-schema.json
        JSON_DIR=/home/$LOGIN_USER/.cinnamon/configs/IcingTaskManager@json
        # NOTE: #.json has to match enabled-applets number!!
        JSON_FILE=$JSON_DIR/115.json

        if ! [ -e "$JSON_FILE" ];
        then
            echo "copying in default json config: $DEFAULT_CONFIG"
            mkdir -p $JSON_DIR 
            $RUN_AS_USER cp $DEFAULT_CONFIG $JSON_FILE $CLOSE
        fi

        #now update saved launchers for ALL instances (hopefully not going to make anyone angry...)
        echo "updating config for JSON_FILE: $JSON_FILE"
        #jq can't do "sed -i" inplace update, so need to re-create file, then
        # update ownership (in case run as root)
        NEW_FILE=$(jq '.["pinned-apps"].value='$SAVED_LAUNCHERS < $JSON_FILE)
        $RUN_AS_USER echo "$NEW_FILE" > $JSON_FILE $CLOSE
    fi
}

resetMenu()
{
    # menu applet resets:
    DEFAULT_CONFIG=/usr/share/cinnamon/applets/menu@cinnamon.org/settings-schema.json
    JSON_DIR=/home/$LOGIN_USER/.cinnamon/configs/menu@cinnamon.org
    # NOTE: #.json has to match enabled-applets number!!
    JSON_FILE=$JSON_DIR/101.json
    if ! [ -e "$JSON_FILE" ];
    then
        echo "copying in default json config: $DEFAULT_CONFIG"
        mkdir -p $JSON_DIR 
        $RUN_AS_USER cp $DEFAULT_CONFIG $JSON_FILE $CLOSE
    fi

    # set menu to show favorites / shutdown options
    # set menu icon to wasta-linux 48px
    echo "updating JSON_FILE: $JSON_FILE"
    #jq can't do "sed -i" inplace update, so need to re-create file, then
    # update ownership (in case run as root)
    NEW_FILE=$(jq '.["favbox-show"].value=true | .["menu-icon-custom"].value=false | .["menu-label"].value="Menu"' \
        < $JSON_FILE)
    $RUN_AS_USER echo "$NEW_FILE" > $JSON_FILE $CLOSE
}

# ------------------------------------------------------------------------------
# Main Processing
# ------------------------------------------------------------------------------

# SAVE current itm OR panel-launcher apps to restore later....

# create tempfile with arbitrary old date that will seed date for most current
#   launchers
COMPFILE=$(mktemp)
touch $COMPFILE -d '2000-01-01'

ITM_SAVE_FILE=$COMPFILE
ITM_PINNED_APPS=""
# sending errors to null and making sure no error returned if no files exist
for ITM_FILE in $(ls /home/$LOGIN_USER/.cinnamon/configs/IcingTaskManager@json/*.json 2> /dev/null || true);
do
    ITM_DATE=$(date -r $ITM_FILE)
    if [ "$ITM_FILE" -nt "$ITM_SAVE_FILE" ];
    then    
        ITM_SAVE_FILE=$ITM_FILE
        ITM_PINNED_APPS=$(jq -c '.["pinned-apps"].value' < $ITM_SAVE_FILE)
    fi
done

#PL_FILES=$(ls -1 /home/$LOGIN_USER/.cinnamon/configs/panel-launchers@cinnamon.org/*.json)
PL_SAVE_FILE=$COMPFILE
PL_LAUNCHERS=""
# sending errors to null and making sure no error returned if no files exist
for PL_FILE in $(ls /home/$LOGIN_USER/.cinnamon/configs/panel-launchers@cinnamon.org/*.json 2> /dev/null || true);
do
    PL_DATE=$(date -r $PL_FILE)
    if [ "$PL_FILE" -nt "$PL_SAVE_FILE" ];
    then    
        PL_SAVE_FILE=$PL_FILE
        PL_LAUNCHERS=$(jq -c '.["launcherList"].value' < $PL_SAVE_FILE)
    fi
done

SAVED_LAUNCHERS=""
if [ "$PL_SAVE_FILE" -nt "$ITM_SAVE_FILE" ];
then
    echo "*** PL newest"
    SAVED_LAUNCHERS=$PL_LAUNCHERS
    echo "*** SAVED_LAUNCHERS set to: $PL_LAUNCHERS"
elif [ "$ITM_SAVE_FILE" -nt "$PL_SAVE_FILE" ];
then
    echo "*** ITM newest"
    SAVED_LAUNCHERS=$ITM_PINNED_APPS
    echo "*** SAVED_LAUNCHERS set to: $ITM_PINNED_APPS"
else
    echo "*** PL and ITM don't exist..... both equal implying only at default"
fi

echo "*** SAVED_LAUNCHERS final value: $SAVED_LAUNCHERS"

# remove comparison time file
rm $COMPFILE

# if parameter passed, run non-interactively
CHOICE=$1
if [ "$CHOICE" != "" ];
then
    AUTO="AUTO"
    # sudo commands done using pkexec so get option for user to change1
    pkexec /usr/bin/wasta-layout-pkexec $1
    RETURN=$?
else
    # Run interactively
    # prompt user    
    CHOICE=$(zenity --list --title="wasta [Layout]" \
        --window-icon=/usr/share/icons/hicolor/64x64/apps/wasta-linux.png \
        --height=450 --text \
"This utility <i><b>changes</b></i> your Cinnamon Desktop Layout
defaults different presets.  The system defaults will be able
to be overridden by user settings, only the system default
layouts are affected.

<b><i>Choose your preferred layout:</i></b>" --radiolist \
        --column "" --column "Layout" --column "Description" \
        TRUE        default           "Default Cinnamon layout" \
        FALSE       redmond7          "Windows 7 inspired layout" \
        FALSE       cupertino         "MacOS/OSX insipired layout" \
        FALSE       unity             "Ubuntu Unity inspired layout")
fi

if [ "$CHOICE" == "" ];
then
    # EXIT: no layout selected
    echo
    echo "no layout selected: exiting..."
    echo
    exit 0
fi

pkexec /usr/bin/wasta-layout-pkexec $CHOICE
RETURN=$?
if [ "$RETURN" != "0" ];
then
    # didn't return clean from pkexec: get outta here!
    exit 1
fi

# all layouts: stop plank and disable plank autostart (cupertino will later re-enable)
killall plank &> /dev/null || true;
PLANK_FILE=/home/$LOGIN_USER/.config/autostart/plank-wasta-layout.desktop
if [ -e $PLANK_FILE ];
then
    desktop-file-edit --set-key="X-GNOME-Autostart-enabled" --set-value=false \
        $PLANK_FILE
fi

case "$CHOICE" in
    
"default")
    # reset menu applet:
    resetMenu

    # if SAVED_LAUNCHERS set panel-launchers
    if [ "$SAVED_LAUNCHERS" ];
    then
        DEFAULT_CONFIG=/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/settings-schema.json
        JSON_DIR=/home/$LOGIN_USER/.cinnamon/configs/panel-launchers@cinnamon.org
        # NOTE: #.json has to match enabled-applets number!!
        JSON_FILE=$JSON_DIR/103.json

        if ! [ -e "$JSON_FILE" ];
        then
            echo "copying in default json config: $DEFAULT_CONFIG"
            mkdir -p $JSON_DIR 
            $RUN_AS_USER cp $DEFAULT_CONFIG $JSON_FILE $CLOSE
        fi

        #update saved launchers
        echo "updating JSON_FILE: $JSON_FILE"
        #jq can't do "sed -i" inplace update, so need to re-create file, then
        # update ownership (in case run as root)
        NEW_FILE=$(jq '.["launcherList"].value='$SAVED_LAUNCHERS < $JSON_FILE)
        $RUN_AS_USER echo "$NEW_FILE" > $JSON_FILE $CLOSE
    fi 
;;
        
"redmond7")
    # if SAVED_LAUNCHERS set pinned-apps
    updateITMPinned

    # reset menu applet:
    resetMenu
;;

"unity")
    # if SAVED_LAUNCHERS set pinned-apps
    updateITMPinned

    # modify menu (use w-l logo, no favorites or shutdown options)
    DEFAULT_CONFIG=/usr/share/cinnamon/applets/menu@cinnamon.org/settings-schema.json
    JSON_DIR=/home/$LOGIN_USER/.cinnamon/configs/menu@cinnamon.org
    # NOTE: #.json has to match enabled-applets number!!
    JSON_FILE=$JSON_DIR/101.json
    if ! [ -e "$JSON_FILE" ];
    then
        echo "copying in default json config: $DEFAULT_CONFIG"
        mkdir -p $JSON_DIR 
        $RUN_AS_USER cp $DEFAULT_CONFIG $JSON_FILE $CLOSE
    fi

    # set menu to NOT show favorites / shutdown options
    # set menu icon to wasta-linux 48px
    echo "updating JSON_FILE: $JSON_FILE"
    #jq can't do "sed -i" inplace update, so need to re-create file, then
    # update ownership (in case run as root)
    NEW_FILE=$(jq '.["favbox-show"].value=false | .["menu-icon-custom"].value=true | .["menu-icon"].value="'$DIR/resources/launcher_bfb.png'" | .["menu-label"].value=""' \
        < $JSON_FILE)
    $RUN_AS_USER echo "$NEW_FILE" > $JSON_FILE $CLOSE

    # panel transparency updates
    DEFAULT_CONFIG=/usr/share/cinnamon/extensions/transparent-panels@germanfr/settings-schema.json
    JSON_DIR=/home/$LOGIN_USER/.cinnamon/configs/transparent-panels@germanfr
    JSON_FILE=$JSON_DIR/transparent-panels@germanfr.json
    if ! [ -e "$JSON_FILE" ];
    then
        echo "copying in default json config: $DEFAULT_CONFIG"
        mkdir -p $JSON_DIR 
        $RUN_AS_USER cp $DEFAULT_CONFIG $JSON_FILE $CLOSE
    fi

    # set transparency to "semi-transparent"
    echo "updating JSON_FILE: $JSON_FILE"
    #jq can't do "sed -i" inplace update, so need to re-create file, then
    # update ownership (in case run as root)
    NEW_FILE=$(jq '.["transparency-type"].value="panel-transparent-semi__internal"' \
        < $JSON_FILE)
    $RUN_AS_USER echo "$NEW_FILE" > $JSON_FILE $CLOSE
;;

"cupertino")
    # reset menu applet:
    resetMenu

    # set Plank to autostart
    if ! [ -e $PLANK_FILE ];
    then
        $RUN_AS_USER cp /usr/share/applications/plank.desktop $PLANK_FILE $CLOSE
        desktop-file-edit --add-only-show-in="X-Cinnamon" $PLANK_FILE
        desktop-file-edit --set-name="Plank (Wasta-Layout)" $PLANK_FILE
    fi
    desktop-file-edit --set-key="X-GNOME-Autostart-enabled" --set-value=true \
        $PLANK_FILE

    PLANK_FOLDER=/home/$LOGIN_USER/.config/plank/dock1/launchers
    if ! [ -e "$PLANK_FOLDER" ];
    then
        echo "creating default plank launcher folder"
        $RUN_AS_USER mkdir -p $PLANK_FOLDER $CLOSE
        $RUN_AS_USER rsync -av $DIR/resources/launchers/ $PLANK_FOLDER/ $CLOSE
        sleep 1 
    fi

    # start Plank
    $RUN_AS_USER nohup plank &> /dev/null & $CLOSE
;;

*)
;;
    #do nothing    
esac


if [ $RETURN -ne 0 ];
then
    MSG="$CHOICE Layout choice <b>NOT APPLIED</b>\n\n"
else
    MSG="$CHOICE layout <b>APPLIED</b>\n\n"
fi

echo
echo " *** restarting Cinnamon ***"
echo
sleep 1s

MSG+="Restarting Cinnamon to Apply Changes\n\n"

# need to reset keys associated with panel layouts
$RUN_AS_USER gsettings reset org.cinnamon enabled-applets $CLOSE
$RUN_AS_USER gsettings reset org.cinnamon enabled-extensions $CLOSE
$RUN_AS_USER gsettings reset org.cinnamon panels-autohide $CLOSE
$RUN_AS_USER gsettings reset org.cinnamon panels-enabled $CLOSE
$RUN_AS_USER gsettings reset org.cinnamon panels-height $CLOSE
$RUN_AS_USER gsettings reset org.cinnamon panels-resizable $CLOSE

# restart cinnamon
$RUN_AS_USER nohup cinnamon --replace &> /dev/null & $CLOSE

# give a few seconds for Cinnamon to finish restarting
sleep 3s

echo
echo " *** Cinnamon restarted ***"
echo

MSG+="Cinnamon Restarted Successfully\n\n"
MSG+="<b>Please reboot your computer if you have any trouble</b>\n\n"

# ------------------------------------------------------------------------------
# Finished
# ------------------------------------------------------------------------------

if ! [ "$AUTO" ];
then
    # prompt user
    zenity --info --title "wasta [Layout]: Finished" --no-wrap --height=150 --width=450 \
        --window-icon=/usr/share/icons/hicolor/64x64/apps/wasta-linux.png \
        --text="$MSG"
else
    echo
    echo " *** Script Exit: wasta-layout (non-interactive)"
    echo
fi

exit 0

